{"version":3,"sources":["index.js"],"names":["getSquareNumber","num","n","Math","sqrt","floor","console","error","Square","className","style","fontWeight","this","props","id","chessIndex","backgroundColor","winners","indexOf","animation","onClick","onDrag","onMouseMove","value","React","Component","Board","count","squares","length","rows","current","i","columns","j","push","index","createSquares","Game","squareNumber","state","history","Array","fill","xIsNext","getWinnersArr","isEnd","position","chessTotal","sqrtCount","finalWinners","inputChessTotal","bind","row","status","winner","order","forEach","element","chesses","filter","x","o","checkWinner","isFull","slice","checkDraw","alert","setState","calculateRow","calculateColumn","newHistory","concat","ceil","e","target","val","timelines","map","item","victor","txt","total","join","backTo","cursor","input","width","marginLeft","placeholder","onBlur","onChange","minWidth","padding","border","borderRadius","margin","clearBoard","handleClick","marginTop","color","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df45a2ea.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// checkerboard number\nconst CHESS_COUNT = 25;\n\n// get the square number\nfunction getSquareNumber(num) {\n\tconst n = Math.sqrt(num);\n\tif (Math.floor(n) !== n || n < 3 || n > 18) {\n\t\tconsole.error(\"Your input is invalid.We only accept legal numbers that we can square and the square number must be greater than 2.\");\n\t\treturn 0;\n\t}\n\n\treturn n;\n}\n\nclass Square extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<button className=\"square\" style={{fontWeight: this.props.id === this.props.chessIndex ? '700' : '300', backgroundColor: this.props.winners.indexOf(this.props.id) > -1 ? 'yellow': 'white', animation: this.props.winners.indexOf(this.props.id) > -1 ? 'flash .3s infinite' : ''}} onClick={() => this.props.onClick(this.props.id)} onDrag={this.props.onMouseMove(this.props.id)}>\n\t\t\t\t{this.props.value}\n\t\t\t</button>\n\t\t);\n\t}\n}\n\nclass Board extends React.Component {\n\tcreateSquares() {\n\t\tconst count = getSquareNumber(this.props.squares.length);\n\t\tif (!count) return;\n\t\tlet rows = [];\n\t\tlet current = 0;\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tlet columns = [];\n\t\t\tfor (let j = 0; j < count; j++) {\n\t\t\t\tcolumns.push(<Square key={current} id={current} value={this.props.squares[current]} chessIndex={this.props.chessIndex} winners={this.props.winners} onClick={index => this.props.onClick(index)} onMouseMove={index => this.props.onMouseMove(index)} />);\n\t\t\t\tcurrent++;\n\t\t\t}\n\t\t\trows.push(<div className=\"board-row\" key={i}>{columns}</div>);\n\t\t}\n\n\t\treturn rows;\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>{this.createSquares()}</div>\n\t\t);\n\t}\n}\n\nclass Game extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tlet squareNumber = getSquareNumber(CHESS_COUNT);\n\t\tthis.state = {\n\t\t\thistory: [\n\t\t\t\t{\n\t\t\t\t\tsquares: Array(CHESS_COUNT).fill(null)\n\t\t\t\t}\n\t\t\t],\n\t\t\txIsNext: true, // whether the next is x or not\n\t\t\tcurrent: 0, // current timeline index\n\t\t\twinners: squareNumber ? this.getWinnersArr(squareNumber) : [],\n\t\t\tisEnd: false,\n\t\t\tposition: \"row 1, column 1\",\n\t\t\tchessIndex: 0, // current clicked chess\n\t\t\tchessTotal: CHESS_COUNT,\n\t\t\tsqrtCount: squareNumber,\n\t\t\tfinalWinners: []\n\t\t}\n\n\t\tthis.inputChessTotal = this.inputChessTotal.bind(this);\n\t}\n\n\t// get the winners status\n\tgetWinnersArr(num) {\n\t\tlet winners = [];\n\t\t// get consecutive numbers\n\t\tlet current = 0;\n\t\tfor (let i = 0; i < num; i++) {\n\t\t\tlet row = [];\n\t\t\tfor (let j = 0; j < num; j++) {\n\t\t\t\trow.push(current);\n\t\t\t\tcurrent++;\n\t\t\t}\n\n\t\t\twinners.push(row)\n\t\t}\n\n\t\t// get step numbers\n\t\tfor (let i = 0; i < num; i++) {\n\t\t\tlet row = [];\n\t\t\tlet current = i;\n\t\t\tfor (let j = 0; j < num; j++) {\n\t\t\t\trow.push(current);\n\t\t\t\tcurrent += num;\n\t\t\t}\n\n\t\t\twinners.push(row);\n\t\t}\n\n\t\t// get the crossed numbers\n\t\t// the first number of the line one\n\t\tlet row = [];\n\t\tcurrent = 0;\n\t\tfor (let j = 0; j < num; j++) {\n\t\t\trow.push(current);\n\t\t\tcurrent += num + 1;\n\t\t}\n\n\t\twinners.push(row);\n\n\t\t// the last number of the line one \n\t\trow = [];\n\t\tcurrent = num - 1;\n\n\t\tfor (let j = 0; j < num; j++) {\n\t\t\trow.push(current);\n\t\t\tcurrent += num - 1;\n\t\t}\n\n\t\twinners.push(row);\n\n\t\t// console.log(winners);\n\n\t\treturn winners;\n\t}\n\n\t// check who is the winner\n\tcheckWinner(current, status) {\n\t\tconst squares = this.state.history[current ?? this.state.current].squares;\n\t\tconst count = this.state.sqrtCount;\n\t\tconst winners = this.state.winners;\n\n\t\tlet winner = '';\n\t\tlet order = [];\n\t\twinners.forEach(element => {\n\t\t\tlet chesses = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tchesses.push(squares[element[i]])\n\t\t\t}\n\n\t\t\t// checking who is the winner.\n\t\t\tif (chesses.filter(x => x === 'x').length === chesses.length) {\n\t\t\t\twinner = 'x';\n\t\t\t\torder = element;\n\t\t\t}\n\t\t\tif (chesses.filter(o => o === 'o').length === chesses.length) {\n\t\t\t\twinner = 'o';\n\t\t\t\torder = element;\n\t\t\t}\n\t\t});\n\n\t\treturn status ? order : winner;\n\t}\n\n\tcheckDraw(current) {\n\t\tconst squares = this.state.history[current ?? this.state.current].squares;\n\t\tconst count = this.state.sqrtCount;\n\t\tconst winners = this.state.winners;\n\n\t\t// if sb is winner,return false\n\t\tif (this.checkWinner(current)) return false;\n\n\t\tlet isFull = true;\n\t\tlet status = [];\n\t\twinners.forEach(element => {\n\t\t\tlet chesses = [];\n\t\t\tfor (let i = 0; i < count; i++) {\n\t\t\t\tchesses.push(squares[element[i]])\n\t\t\t}\n\n\t\t\t// If in the special lines that contains neither o or x indicates not finished.\n\t\t\tif (chesses.indexOf(\"x\") > -1 && chesses.indexOf('o') > -1) isFull &= true;\n\t\t\telse isFull &= false;\n\t\t});\n\n\t\treturn isFull;\n\t}\n\n\thandleClick(i) {\n\t\tconst history = this.state.history.slice();\n\t\tconst current = history[this.state.current];\n\n\t\t// if the square already has a value then return;\n\t\tif (current.squares[i] || this.state.isEnd) return;\n\n\t\tif (this.checkDraw(this.state.current)) {\n\t\t\talert(\"You have got a draw and the game is over!\");\n\t\t\tthis.setState({\n\t\t\t\tisEnd: true\n\t\t\t})\n\t\t\treturn;\n\t\t}\n\n\t\tcurrent.squares[i] = this.state.xIsNext ? 'x' : 'o';\n\t\thistory[this.state.current] = current;\n\t\t// winner is not empty, that means game over.\n\t\tlet winner = this.checkWinner();\n\t\tlet finalWinners = this.checkWinner(this.state.current, true);\n\t\tthis.setState({\n\t\t\thistory: history,\n\t\t\txIsNext: !this.state.xIsNext,\n\t\t\tisEnd: !!winner,\n\t\t\tposition: \"row \" + this.calculateRow(i+1) + \", column \" + (this.calculateColumn(i) + 1),\n\t\t\tchessIndex: i,\n\t\t\tfinalWinners: finalWinners\n\t\t})\n\t}\n\n\tclearBoard() {\n\t\tif (this.state.chessTotal < 9) return;\n\t\tlet newHistory = [{\n\t\t\tsquares: Array(this.state.chessTotal).fill(null)\n\t\t}];\n\t\tthis.setState({\n\t\t\tisEnd: false,\n\t\t\thistory: newHistory.concat(this.state.history),\n\t\t\tposition: \"row 1, column 1\",\n\t\t\tfinalWinners: []\n\t\t});\n\t}\n\n\t// 计算行号\n\tcalculateRow(order) {\n\t\tconst count = this.state.sqrtCount;\n\t\treturn Math.ceil(order / count);\n\t}\n\n\tcalculateColumn(order) {\n\t\tconst count = this.state.sqrtCount;\n\t\treturn order % count;\n\t}\n\n\tbackTo(e) {\n\t\tconst index = e.target.id*1;\n\t\tconst current = this.state.history[index];\n\t\tthis.setState({\n\t\t\thistory: [current].concat(this.state.history),\n\t\t\tfinalWinners: this.checkWinner(index, true)\n\t\t})\n\t}\n\n\tinputChessTotal(e) {\n\t\t// 输入棋子总数后，重置参数\n\t\tlet val = e.target.value*1;\n\t\tlet history = this.state.history.slice();\n\t\tif (!val) return;\n\t\tthis.setState({\n\t\t\tchessTotal: val\n\t\t})\n\t\tlet squareNumber = getSquareNumber(val);\n\t\tif (!squareNumber) return;\n\t\tconsole.error(\"Change the number of squares will clear all data.Do you want to continue.\");\n\t\tlet squares = {squares: Array(val).fill(null)};\n\t\tthis.setState({\n\t\t\thistory: [squares],\n\t\t\txIsNext: true,\n\t\t\tcurrent: 0,\n\t\t\twinners: this.getWinnersArr(squareNumber),\n\t\t\tisEnd: false,\n\t\t\tposition: \"row 1, column 1\",\n\t\t\tchessIndex: 0,\n\t\t\tsqrtCount: squareNumber,\n\t\t\tfinalWinners: []\n\t\t})\n\t}\n\n\tonMouseMove(i) {\n\t\t// console.log(i)\n\t}\n\n\trender() {\n\t\tconst history = this.state.history;\n\t\tconst current = history[this.state.current];\n\t\tlet winner = this.checkWinner();\n\t\tlet status = \"\";\n\t\tlet timelines = [];\n\t\tif (winner) status = \"Winner is: \" + winner;\n\t\telse status = \"Next player is: \" + (this.state.xIsNext ? 'x' : 'o');\n\t\thistory.map((item, index) => {\n\t\t\tlet victor = this.checkWinner(index);\n\t\t\tlet order = this.checkWinner(index, true);\n\t\t\tlet txt = \"\";\n\t\t\tlet total = item.squares.length;\n\t\t\tif (victor) txt = \"And the winner's chess order is \" + order.join(\",\") + \".\"; \n\t\t\ttimelines.push(<li key={index} id={index} onClick={e => this.backTo(e)} style={{cursor: 'pointer'}} className=\"timeline\">No.{index+1}. The Squares total is {total}. Winner is {victor}.{txt}</li>)\n\t\t\treturn '';\n\t\t});\n\t\tlet input  = <input value={this.state.chessTotal} style={{width: 64 + 'px', marginLeft: 10 + 'px'}} placeholder=\"chess num\" onBlur={this.inputChessTotal} onChange={this.inputChessTotal}/>;\n\t\treturn (\n\t\t\t<div style={{minWidth: '650px', padding: '30px', border: '1px solid #e1e1e1', borderRadius: '10px', margin: '50px auto'}}>\n\t\t\t\t<h2 className=\"title react\">\n\t\t\t\t\tLet's beggin...\n\t\t\t\t\t{input}\n\t\t\t\t\t<button style={{marginLeft: 10 + 'px'}} onClick={() => this.clearBoard()}>Retry</button>\n\t\t\t\t</h2>\n\t\t\t\t<div className=\"game\">\n\t\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t\t<Board onClick={i => this.handleClick(i)} squares={current.squares} chessIndex={this.state.chessIndex} winners={this.state.finalWinners} onMouseMove={i => this.onMouseMove(i)}/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t\t<div>{status}</div>\n\t\t\t\t\t\t<ol>{timelines}</ol>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div style={{marginTop: 15 + 'px', color: '#FF5733'}}>position: {this.state.position}</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// ========================================\n\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}